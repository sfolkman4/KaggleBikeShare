library(tidymodels)
install.packages("tidymodels")
library(vroom)
library(ggplot2)
library(patchwork)
library(tidymodels)
data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/test.csv")
train_data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/train.csv")
# Temperature vs. Count plot
plot1 <- ggplot(data, aes(x = temp)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature", y = "Frequency")
# Windspeed vs. Count plot
plot2 <- ggplot(data, aes(x = season)) +
geom_histogram(bins = 30, fill = "green", color = "black") +
labs(title = "Windspeed Distribution", x = "Windspeed", y = "Frequency")
# Humidity vs. Count plot
plot3 <- ggplot(data, aes(x = humidity)) +
geom_histogram(bins = 30, fill = "red", color = "black") +
labs(title = "Humidity Distribution", x = "Humidity", y = "Frequency")
# Weather bar plot
plot4 <- ggplot(data, aes(x = factor(weather))) +
geom_bar(fill = "purple") +
labs(title = "Weather Conditions", x = "Weather", y = "Count")
grid_plot <- (plot1 + plot2) / (plot3 + plot4)
grid_plot
## Setup and Fit the Linear Regression Model3
my_linear_model <- linear_reg() %>% #Type of model4
set_engine("lm") %>% # Engine = What R function to use5
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=Response~X1+X2+..., data=trainData)
col(data)
str(data)
## Setup and Fit the Linear Regression Model3
my_linear_model <- linear_reg() %>% #Type of model4
set_engine("lm") %>% # Engine = What R function to use5
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=Log(count)~datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data=data)
## Setup and Fit the Linear Regression Model3
my_linear_model <- linear_reg() %>% #Type of model4
set_engine("lm") %>% # Engine = What R function to use5
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=log(count)~datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data=data)
## Setup and Fit the Linear Regression Model3
my_linear_model <- linear_reg() %>% #Type of model4
set_engine("lm") %>% # Engine = What R function to use5
set_mode("regression") %>% # Regression just means quantitative response6
fit(formula=log(count)~datetime + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data=data)
View(data)
library(vroom)
library(ggplot2)
library(patchwork)
library(tidymodels)
data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/test.csv")
train_data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/train.csv")
# Temperature vs. Count plot
plot1 <- ggplot(data, aes(x = temp)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature", y = "Frequency")
# Windspeed vs. Count plot
plot2 <- ggplot(data, aes(x = season)) +
geom_histogram(bins = 30, fill = "green", color = "black") +
labs(title = "Windspeed Distribution", x = "Windspeed", y = "Frequency")
# Humidity vs. Count plot
plot3 <- ggplot(data, aes(x = humidity)) +
geom_histogram(bins = 30, fill = "red", color = "black") +
labs(title = "Humidity Distribution", x = "Humidity", y = "Frequency")
# Weather bar plot
plot4 <- ggplot(data, aes(x = factor(weather))) +
geom_bar(fill = "purple") +
labs(title = "Weather Conditions", x = "Weather", y = "Count")
grid_plot <- (plot1 + plot2) / (plot3 + plot4)
View(data)
# Convert `datetime` to appropriate features if necessary
data$hour <- as.numeric(format(trainData$datetime, "%H"))
# Convert `datetime` to appropriate features if necessary
data$hour <- as.numeric(format(data$datetime, "%H"))
data$day <- as.numeric(format(data$datetime, "%d"))
data$month <- as.numeric(format(data$datetime, "%m"))
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(log(count) ~ hour + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data = data)
train_data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/train.csv")
test_data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/test.csv")
# Temperature vs. Count plot
plot1 <- ggplot(data, aes(x = temp)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature", y = "Frequency")
# Windspeed vs. Count plot
plot2 <- ggplot(data, aes(x = season)) +
geom_histogram(bins = 30, fill = "green", color = "black") +
labs(title = "Windspeed Distribution", x = "Windspeed", y = "Frequency")
# Humidity vs. Count plot
plot3 <- ggplot(data, aes(x = humidity)) +
geom_histogram(bins = 30, fill = "red", color = "black") +
labs(title = "Humidity Distribution", x = "Humidity", y = "Frequency")
# Weather bar plot
plot4 <- ggplot(data, aes(x = factor(weather))) +
geom_bar(fill = "purple") +
labs(title = "Weather Conditions", x = "Weather", y = "Count")
grid_plot <- (plot1 + plot2) / (plot3 + plot4)
data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/train.csv")
test_data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/test.csv")
# Temperature vs. Count plot
plot1 <- ggplot(data, aes(x = temp)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature", y = "Frequency")
# Windspeed vs. Count plot
plot2 <- ggplot(data, aes(x = season)) +
geom_histogram(bins = 30, fill = "green", color = "black") +
labs(title = "Windspeed Distribution", x = "Windspeed", y = "Frequency")
# Humidity vs. Count plot
plot3 <- ggplot(data, aes(x = humidity)) +
geom_histogram(bins = 30, fill = "red", color = "black") +
labs(title = "Humidity Distribution", x = "Humidity", y = "Frequency")
# Weather bar plot
plot4 <- ggplot(data, aes(x = factor(weather))) +
geom_bar(fill = "purple") +
labs(title = "Weather Conditions", x = "Weather", y = "Count")
grid_plot <- (plot1 + plot2) / (plot3 + plot4)
View(data)
# Convert `datetime` to appropriate features if necessary
data$hour <- as.numeric(format(data$datetime, "%H"))
data$day <- as.numeric(format(data$datetime, "%d"))
data$month <- as.numeric(format(data$datetime, "%m"))
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(log(count) ~ hour + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data = data)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=test_Data) # Use fit to predict
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=test_data) # Use fit to predict
test_data$season <- as.factor(test_data$season)
test_data$holiday <- as.factor(test_data$holiday)
test_data$workingday <- as.factor(test_data$workingday)
test_data$weather <- as.factor(test_data$weather)
train_data$season <- as.factor(train_data$season)
train_data$holiday <- as.factor(train_data$holiday)
train_data$workingday <- as.factor(train_data$workingday)
train_data$weather <- as.factor(train_data$weather)
test_data$season <- as.factor(test_data$season)
test_data$holiday <- as.factor(test_data$holiday)
test_data$workingday <- as.factor(test_data$workingday)
test_data$weather <- as.factor(test_data$weather)
train_data$season <- as.factor(train_data$season)
train_data$holiday <- as.factor(train_data$holiday)
train_data$workingday <- as.factor(train_data$workingday)
train_data$weather <- as.factor(train_data$weather)
test_data$season <- as.factor(test_data$season)
test_data$holiday <- as.factor(test_data$holiday)
test_data$workingday <- as.factor(test_data$workingday)
test_data$weather <- as.factor(test_data$weather)
test_data$hour <- as.numeric(format(test_data$datetime, "%H"))
test_data$day <- as.numeric(format(test_data$datetime, "%d"))
test_data$month <- as.numeric(format(test_data$datetime, "%m"))
train_data$hour <- as.numeric(format(train_data$datetime, "%H"))
train_data$day <- as.numeric(format(train_data$datetime, "%d"))
train_data$month <- as.numeric(format(train_data$datetime, "%m"))
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(log(count) ~ hour + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data = data)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=test_data) # Use fit to predict
train_data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/train.csv")
test_data <- vroom("C:/Users/sfolk/Desktop/STAT348/KaggleBikeShare/test.csv")
# Temperature vs. Count plot
plot1 <- ggplot(data, aes(x = temp)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature", y = "Frequency")
# Windspeed vs. Count plot
plot2 <- ggplot(data, aes(x = season)) +
geom_histogram(bins = 30, fill = "green", color = "black") +
labs(title = "Windspeed Distribution", x = "Windspeed", y = "Frequency")
# Humidity vs. Count plot
plot3 <- ggplot(data, aes(x = humidity)) +
geom_histogram(bins = 30, fill = "red", color = "black") +
labs(title = "Humidity Distribution", x = "Humidity", y = "Frequency")
# Weather bar plot
plot4 <- ggplot(data, aes(x = factor(weather))) +
geom_bar(fill = "purple") +
labs(title = "Weather Conditions", x = "Weather", y = "Count")
grid_plot <- (plot1 + plot2) / (plot3 + plot4)
View(data)
train_data$season <- as.factor(train_data$season)
train_data$holiday <- as.factor(train_data$holiday)
train_data$workingday <- as.factor(train_data$workingday)
train_data$weather <- as.factor(train_data$weather)
test_data$season <- as.factor(test_data$season)
test_data$holiday <- as.factor(test_data$holiday)
test_data$workingday <- as.factor(test_data$workingday)
test_data$weather <- as.factor(test_data$weather)
test_data$hour <- as.numeric(format(test_data$datetime, "%H"))
test_data$day <- as.numeric(format(test_data$datetime, "%d"))
test_data$month <- as.numeric(format(test_data$datetime, "%m"))
train_data$hour <- as.numeric(format(train_data$datetime, "%H"))
train_data$day <- as.numeric(format(train_data$datetime, "%d"))
train_data$month <- as.numeric(format(train_data$datetime, "%m"))
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(log(count) ~ hour + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data = train_data)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=test_data) # Use fit to predict
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(test_data) %>%
select(datetime, .pred) %>%
rename(target = .pred) %>%
mutate(target = pmax(0, target)) %>%  # Ensure non-negative predictions
mutate(datetime = as.character(datetime))  # Format datetime for submission
# Write the submission file
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
train_data$season <- as.factor(train_data$season)
train_data$holiday <- as.factor(train_data$holiday)
train_data$workingday <- as.factor(train_data$workingday)
train_data$weather <- as.factor(train_data$weather)
test_data$season <- as.factor(test_data$season)
test_data$holiday <- as.factor(test_data$holiday)
test_data$workingday <- as.factor(test_data$workingday)
test_data$weather <- as.factor(test_data$weather)
test_data$hour <- as.numeric(format(test_data$datetime, "%H"))
test_data$day <- as.numeric(format(test_data$datetime, "%d"))
test_data$month <- as.numeric(format(test_data$datetime, "%m"))
train_data$hour <- as.numeric(format(train_data$datetime, "%H"))
train_data$day <- as.numeric(format(train_data$datetime, "%d"))
train_data$month <- as.numeric(format(train_data$datetime, "%m"))
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression") %>%
fit(log(count) ~ hour + season + holiday + workingday + weather + temp + atemp + humidity + windspeed, data = train_data)
## Generate Predictions Using Linear Model
bike_predictions <- predict(my_linear_model,
new_data=test_data) # Use fit to predict
bike_predictions ## Look at the output
kaggle_submission <- bike_predictions %>%
bind_cols(test_data) %>%
select(datetime, .pred) %>%
rename(target = .pred) %>%
mutate(target = pmax(0, target)) %>%  # Ensure non-negative predictions
mutate(datetime = as.character(format(datetime)))  # Format datetime for submission
# Write the submission file
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
# Ensure that the predictions are correctly formatted
kaggle_submission <- bike_predictions %>%
bind_cols(test_data) %>%                # Combine predictions with test data
select(datetime, .pred) %>%             # Select datetime and predicted values
rename(count = .pred) %>%               # Rename .pred to count
mutate(count = pmax(0, count)) %>%      # Ensure no negative predictions
mutate(datetime = as.character(datetime))  # Convert datetime to character for submission
# Write the submission file
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
# Ensure that the predictions are correctly formatted
kaggle_submission <- bike_predictions %>%
# Ensure that the predictions are correctly formatted
kaggle_submission <- bike_predictions %>%
bind_cols(test_data) %>%                # Combine predictions with test data
select(datetime, .pred) %>%             # Select datetime and predicted values
rename(count = .pred) %>%               # Rename .pred to count
mutate(count = pmax(0, count)) %>%      # Ensure no negative predictions
mutate(datetime = as.character(format(datetime)))  # Convert datetime to character for submission
# Ensure that the predictions are correctly formatted
kaggle_submission <- bike_predictions %>%
bind_cols(test_data) %>%                # Combine predictions with test data
select(datetime, .pred) %>%             # Select datetime and predicted values
rename(count = .pred) %>%               # Rename .pred to count
mutate(count = pmax(0, count)) %>%      # Ensure no negative predictions
mutate(datetime = as.character(format(datetime)))  # Convert datetime to character for submission
# Write the submission file
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
